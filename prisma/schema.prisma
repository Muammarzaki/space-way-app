// DATABASE CONFIG
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER MODEL
enum Role {
  VIEWER
  USER
  ADMIN
}

enum OrganizationType {
  COMPANY
  STARTUP
  SME
  SOLE_PROPRIETORSHIP
  COOPERATIVE

  GOVERNMENT_AGENCY
  STATE_OWNED

  NON_PROFIT
  FOUNDATION
  ASSOCIATION
  EDUCATIONAL
  RELIGIOUS
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
  PENDING
  INACTIVE
}

model User {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  email         String         @unique
  name          String
  role          Role           @default(USER)
  Organizations Organization[]

  Member Member[]
}

model Organization {
  id               String  @id @default(uuid(7))
  name             String
  owner            User    @relation(fields: [userId], references: [id])
  userId           Int
  organizationType String
  address          String
  email            String?
  phone            String?

  Member       Member[]
  Subscription Subscription[]
}

model Member {
  id             Int      @id @default(autoincrement())
  userId         Int
  organizationId String
  role           String?
  joinedAt       DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
}

model Plan {
  id            Int            @id @default(autoincrement())
  name          String
  price         Decimal
  durationDays  Int
  subscriptions Subscription[]
}

model Subscription {
  id             Int                @id @default(autoincrement())
  organizationId String
  planId         Int
  startDate      DateTime           @default(now())
  endDate        DateTime
  status         SubscriptionStatus @default(INACTIVE)

  plan         Plan         @relation(fields: [planId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
}

// DATA STORE MODEL
model SVGFile {
  name   String  @id
  sizeKb Int
  alt    String?
  ratio  Float

  Map Map[]
}

model Map {
  id     Int     @id
  vector SVGFile @relation(fields: [sVGFileName], references: [name])

  sVGFileName String @unique
  Floor       Floor?
}

model Point {
  id     Int   @id
  pointX Float
  pointY Float
  Room   Room?
}

model Room {
  id      Int    @id
  name    String
  Floor   Floor? @relation(fields: [floorId], references: [id])
  floorId Int?
  point   Point  @relation(fields: [pointId], references: [id])
  pointId Int    @unique
}

model Floor {
  id    Int    @id
  name  String
  level Int
  map   Map    @relation(fields: [mapId], references: [id])
  mapId Int    @unique
  rooms Room[]

  Building   Building @relation(fields: [Buildingid], references: [id])
  Buildingid Int
}

model Building {
  id      Int     @id
  Project Project @relation(fields: [id], references: [id])

  floors Floor[]
}

model AreaField {
  id      Int     @id
  Project Project @relation(fields: [id], references: [id])
}

enum ProjectType {
  BUILDING
  AREAFIELD
}

model Project {
  id   Int         @id
  name String
  type ProjectType

  buildingId  Int?
  areaFieldId Int?
  Building    Building?
  AreaField   AreaField?
}
