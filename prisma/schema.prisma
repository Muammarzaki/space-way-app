// DATABASE CONFIG
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER MODEL
enum OrganizationType {
  COMPANY
  STARTUP
  SME
  SOLE_PROPRIETORSHIP
  COOPERATIVE

  GOVERNMENT_AGENCY
  STATE_OWNED

  NON_PROFIT
  FOUNDATION
  ASSOCIATION
  EDUCATIONAL
  RELIGIOUS
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
  PENDING
  INACTIVE
}

model User {
  email     String   @id
  createdAt DateTime @default(now())
  name      String   @unique
  OrganizationsOwned Organization[]

  Members Member[]
}

model Organization {
  id               String  @id @default(uuid(7))
  name             String
  organizationType String
  address          String
  email            String?
  phone            String?

  owner        User          @relation(fields: [ownerId], references: [email], onUpdate: Cascade)
  ownerId      String
  Members      Member[]
  Subscription Subscription?
  Projects     Project[]
}

model Member {
  id       Int      @id @default(autoincrement())
  organizationId String
  role     String
  joinedAt DateTime @default(now())

  User User @relation(fields: [userId], references: [email])
  userId        String
  Organizations Organization[]
}

model Plan {
  id            Int            @id @default(autoincrement())
  name          String
  price         Decimal
  durationDays  Int
  Subscriptions Subscription[]
}

model Subscription {
  id        Int                @id @default(autoincrement())
  planId    Int
  startDate DateTime           @default(now())
  endDate   DateTime
  status    SubscriptionStatus @default(INACTIVE)

  Plan           Plan         @relation(fields: [planId], references: [id])
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @unique
}

// DATA STORE MODEL
model SVGFile {
  id String @id
  displayName String
  sizeKb      Int
  alt         String?
  ratio       Float
  path        String
  mimetype    String

  Map Map?
}

model Map {
  id   String @id
  name String

  Vector SVGFile @relation(fields: [sVGFileId], references: [id])
  sVGFileId String  @unique
  Floor     Floor?
  Site      Site?
}

model Point {
  id     Int   @id @default(autoincrement())
  pointX Float
  pointY Float
  Room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  roomId Int  @unique
}

model Room {
  id    Int    @id @default(autoincrement())
  name  String
  point Point?

  Floor   Floor? @relation(fields: [floorId], references: [id])
  floorId Int?
}

model Floor {
  id     Int     @id @default(autoincrement())
  name   String
  level  Int
  map    Map?    @relation(fields: [mapId], references: [id])
  mapId  String? @unique
  Rooms Room[]
  Site   Site?   @relation(fields: [siteId], references: [id])
  siteId String?
}

model Site {
  id String @id @default(uuid(7))
  name String
  type SiteType

  map     Map?     @relation(fields: [mapId], references: [id])
  mapId   String?  @unique
  Project Project? @relation(fields: [projectId], references: [id])
  projectId String?
  Floors  Floor[]
}

enum SiteType {
  BUILDING
  AREAFIELD
}

model Project {
  id   String @id @default(uuid(7))
  name String

  sites          Site[]
  Organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
}
